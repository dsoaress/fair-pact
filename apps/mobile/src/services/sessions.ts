/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * api
 * OpenAPI spec version: 1.0.0
 */
import { useMutation } from '@tanstack/react-query'
import type { MutationFunction, UseMutationOptions, UseMutationResult } from '@tanstack/react-query'
import type { PostSessionsRefresh200, PostSessionsRefreshBody } from './api.schemas'

/**
 * Returns a new JWT token
 * @summary Refresh token
 */
export type postSessionsRefreshResponse = {
  data: PostSessionsRefresh200
  status: number
  headers: Headers
}

export const getPostSessionsRefreshUrl = () => {
  return '/sessions/refresh'
}

export const postSessionsRefresh = async (
  postSessionsRefreshBody: PostSessionsRefreshBody,
  options?: RequestInit
): Promise<postSessionsRefreshResponse> => {
  const res = await fetch(getPostSessionsRefreshUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(postSessionsRefreshBody)
  })
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}

export const getPostSessionsRefreshMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postSessionsRefresh>>,
    TError,
    { data: PostSessionsRefreshBody },
    TContext
  >
  fetch?: RequestInit
}): UseMutationOptions<
  Awaited<ReturnType<typeof postSessionsRefresh>>,
  TError,
  { data: PostSessionsRefreshBody },
  TContext
> => {
  const { mutation: mutationOptions, fetch: fetchOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postSessionsRefresh>>,
    { data: PostSessionsRefreshBody }
  > = props => {
    const { data } = props ?? {}

    return postSessionsRefresh(data, fetchOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostSessionsRefreshMutationResult = NonNullable<
  Awaited<ReturnType<typeof postSessionsRefresh>>
>
export type PostSessionsRefreshMutationBody = PostSessionsRefreshBody
export type PostSessionsRefreshMutationError = unknown

/**
 * @summary Refresh token
 */
export const usePostSessionsRefresh = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postSessionsRefresh>>,
    TError,
    { data: PostSessionsRefreshBody },
    TContext
  >
  fetch?: RequestInit
}): UseMutationResult<
  Awaited<ReturnType<typeof postSessionsRefresh>>,
  TError,
  { data: PostSessionsRefreshBody },
  TContext
> => {
  const mutationOptions = getPostSessionsRefreshMutationOptions(options)

  return useMutation(mutationOptions)
}
