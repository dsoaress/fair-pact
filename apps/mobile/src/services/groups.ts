/**
 * Generated by orval v7.3.0 🍺
 * Do not edit manually.
 * api
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from '@tanstack/react-query'
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type { GetGroups200, GetGroupsGroupId200 } from './api.schemas'

/**
 * Get groups by user
 * @summary Get groups
 */
export type getGroupsResponse = {
  data: GetGroups200
  status: number
  headers: Headers
}

export const getGetGroupsUrl = () => {
  return '/groups'
}

export const getGroups = async (options?: RequestInit): Promise<getGroupsResponse> => {
  const res = await fetch(getGetGroupsUrl(), {
    ...options,
    method: 'GET'
  })
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}

export const getGetGroupsQueryKey = () => {
  return ['/groups'] as const
}

export const getGetGroupsQueryOptions = <
  TData = Awaited<ReturnType<typeof getGroups>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getGroups>>, TError, TData>
  fetch?: RequestInit
}) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetGroupsQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getGroups>>> = ({ signal }) =>
    getGroups({ signal, ...fetchOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getGroups>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetGroupsQueryResult = NonNullable<Awaited<ReturnType<typeof getGroups>>>
export type GetGroupsQueryError = unknown

/**
 * @summary Get groups
 */

export function useGetGroups<
  TData = Awaited<ReturnType<typeof getGroups>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getGroups>>, TError, TData>
  fetch?: RequestInit
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetGroupsQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Get group by id
 * @summary Get group
 */
export type getGroupsGroupIdResponse = {
  data: GetGroupsGroupId200
  status: number
  headers: Headers
}

export const getGetGroupsGroupIdUrl = (groupId: string) => {
  return `/groups/${groupId}`
}

export const getGroupsGroupId = async (
  groupId: string,
  options?: RequestInit
): Promise<getGroupsGroupIdResponse> => {
  const res = await fetch(getGetGroupsGroupIdUrl(groupId), {
    ...options,
    method: 'GET'
  })
  const data = await res.json()

  return { status: res.status, data, headers: res.headers }
}

export const getGetGroupsGroupIdQueryKey = (groupId: string) => {
  return [`/groups/${groupId}`] as const
}

export const getGetGroupsGroupIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getGroupsGroupId>>,
  TError = unknown
>(
  groupId: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getGroupsGroupId>>, TError, TData>
    fetch?: RequestInit
  }
) => {
  const { query: queryOptions, fetch: fetchOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetGroupsGroupIdQueryKey(groupId)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getGroupsGroupId>>> = ({ signal }) =>
    getGroupsGroupId(groupId, { signal, ...fetchOptions })

  return { queryKey, queryFn, enabled: !!groupId, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getGroupsGroupId>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetGroupsGroupIdQueryResult = NonNullable<Awaited<ReturnType<typeof getGroupsGroupId>>>
export type GetGroupsGroupIdQueryError = unknown

/**
 * @summary Get group
 */

export function useGetGroupsGroupId<
  TData = Awaited<ReturnType<typeof getGroupsGroupId>>,
  TError = unknown
>(
  groupId: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getGroupsGroupId>>, TError, TData>
    fetch?: RequestInit
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetGroupsGroupIdQueryOptions(groupId, options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey }

  query.queryKey = queryOptions.queryKey

  return query
}
